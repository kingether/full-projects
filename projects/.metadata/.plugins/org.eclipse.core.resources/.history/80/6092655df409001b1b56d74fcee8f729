package com.example.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.service.PaymentService;



@Controller
@RequestMapping("/cart")
@SessionAttributes({ "cart", "userAddress" })
public class CartController {

	@Autowired
	private PaymentService paymentService;
	@Autowired


	
	
	/* ******* Generate a BrainTreeGateway token for payment transaction ****** */
	@RequestMapping(value = "/payment/token", method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody Map<String, String> getClientToken() {
		return paymentService.getClientToken();
	}

	@PostMapping("/address/add")
	public String addNewShippingAddress(ModelMap modelMap, @Valid AddressForm addressForm, BindingResult bindingResult,
			HttpServletRequest request) {
		if (bindingResult.hasErrors()) {
			System.out.println(
					"--------------------------Error: Adding New Shipping Address-----------------------------");
			System.out.println(bindingResult.getFieldError());
			return "/cart/checkout";
		}
		User user = (User) request.getSession().getAttribute("user");
		addressService.addAddress(addressForm, user.getId());

		return "redirect:/cart/checkout";
	}

	@PostMapping("/address/update")
	public String updateShippingAddress(ModelMap modelMap, @Valid AddressForm addressForm, BindingResult bindingResult,
			HttpServletRequest request) {
		if (bindingResult.hasErrors()) {
			System.out.println("--------------------------Error: Update Shipping Address-----------------------------");
			System.out.println(bindingResult.getFieldError());
			return "redirect:/cart/checkout";
		}
		User user = (User) request.getSession().getAttribute("user");
		addressService.updateAddress(addressForm, user.getId());
		return "redirect:/cart/checkout";
	}

	@PostMapping("/place-order")
	public String placeOrder(@RequestParam("payment_method_nonce") String paymentMethodNonce, ModelMap modelMap,
			HttpServletRequest request, RedirectAttributes redirectAttr) {
		User user = (User) request.getSession().getAttribute("user");
		Cart cart = (Cart) modelMap.get("cart");

		Address address = (Address) request.getSession().getAttribute("userAddress");
		Long orderId = orderService.placeOrder(modelMap, user.getId(), cart.getTotalCost(), address.getAddressId());

		Boolean paymentSuccessful = paymentService.makePayment(orderId, cart.getTotalCost(), paymentMethodNonce);
		if (paymentSuccessful) {
			String hash = orderService.getOrderHash(orderId);
			// *****************************************
			orderService.updatePayed(orderId);
			orderedBookService.insert(cart, orderId);
			shoppingCartService.clearUserCart(user.getId(), cart, request, modelMap);
			bookService.updateBookStock(cart);
			userService.sendOrderDetailsEmail(hash, user);
			// *****************************************
			redirectAttr.addFlashAttribute("orderId", orderId);
			return "redirect:/account/order-details?orderID=" + hash;
		} else {
			redirectAttr.addFlashAttribute("PAYMENT_METHOD_ERROR_MESSAGE_1", "Error! Your paymethod was declined.");
			redirectAttr.addFlashAttribute("PAYMENT_METHOD_ERROR_MESSAGE_2",
					"Please try again or choose a different payment method.");
			return "redirect:/cart/checkout";
		}
	}
}