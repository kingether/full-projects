{"ast":null,"code":"import { useTransactionObservation_UNSTABLE } from 'recoil';\n/**\n * Recoil module to persist state to passed storage (it use localStorage by default)\n *\n * @param {String[]} paths The keys of state object\n *    that will be store in storage\n * @param {Object} config The config object\n * @param {String} [config.key='recoil-persist'] The default key\n *    to use in local storage\n * @param {Storage} [config.storage] Can be set as `sessionStorage` or\n *    `localStorage`. Defaults value is `localStorage`.\n */\n\nexport function recoilPersist() {\n  var paths = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = config.key || 'recoil-persist';\n  var storage = config.storage || localStorage;\n\n  function RecoilPersist() {\n    useTransactionObservation_UNSTABLE(persistState);\n    return null;\n  }\n\n  function persistState(event) {\n    var toStore = {};\n    event.atomValues.forEach(function (value, name) {\n      if (paths.length === 0 || paths.includes(name)) {\n        toStore[name] = value;\n      }\n    });\n\n    try {\n      storage.setItem(key, JSON.stringify(toStore));\n    } catch (e) {}\n  }\n\n  function updateState(_ref) {\n    var set = _ref.set;\n    var toParse = storage.getItem(key);\n    var state;\n\n    try {\n      state = JSON.parse(toParse);\n    } catch (e) {\n      return;\n    }\n\n    if (state === null) {\n      return;\n    }\n\n    Object.keys(state).forEach(function (key) {\n      if (paths.length === 0 || paths.includes(key)) {\n        try {\n          set({\n            key: key\n          }, state[key]);\n        } catch (e) {}\n      }\n    });\n  }\n\n  return {\n    RecoilPersist: RecoilPersist,\n    updateState: updateState\n  };\n}\nexport default recoilPersist;","map":{"version":3,"sources":["/home/abel/Desktop/practice/chat/One-to-One-WebSockets-Chat-master/jwt-social-login-client/node_modules/recoil-persist/index.js"],"names":["useTransactionObservation_UNSTABLE","recoilPersist","paths","config","key","storage","localStorage","RecoilPersist","persistState","event","toStore","atomValues","forEach","value","name","length","includes","setItem","JSON","stringify","e","updateState","set","toParse","getItem","state","parse","Object","keys"],"mappings":"AAAA,SAASA,kCAAT,QAAmD,QAAnD;AAEA;;;;;;;;;;;;AAWA,OAAO,SAASC,aAAT,GAAgD;AAAA,MAAzBC,KAAyB,uEAAjB,EAAiB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACrD,MAAMC,GAAG,GAAGD,MAAM,CAACC,GAAP,IAAc,gBAA1B;AACA,MAAMC,OAAO,GAAGF,MAAM,CAACE,OAAP,IAAkBC,YAAlC;;AAEA,WAASC,aAAT,GAAyB;AACvBP,IAAAA,kCAAkC,CAACQ,YAAD,CAAlC;AACA,WAAO,IAAP;AACD;;AAED,WAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,OAAO,GAAG,EAAhB;AACAD,IAAAA,KAAK,CAACE,UAAN,CAAiBC,OAAjB,CAAyB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxC,UAAIZ,KAAK,CAACa,MAAN,KAAiB,CAAjB,IAAsBb,KAAK,CAACc,QAAN,CAAeF,IAAf,CAA1B,EAAgD;AAC9CJ,QAAAA,OAAO,CAACI,IAAD,CAAP,GAAgBD,KAAhB;AACD;AACF,KAJD;;AAKA,QAAI;AACFR,MAAAA,OAAO,CAACY,OAAR,CAAgBb,GAAhB,EAAqBc,IAAI,CAACC,SAAL,CAAeT,OAAf,CAArB;AACD,KAFD,CAEE,OAAOU,CAAP,EAAU,CAAE;AACf;;AAED,WAASC,WAAT,OAA8B;AAAA,QAAPC,GAAO,QAAPA,GAAO;AAC5B,QAAMC,OAAO,GAAGlB,OAAO,CAACmB,OAAR,CAAgBpB,GAAhB,CAAhB;AACA,QAAIqB,KAAJ;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAGP,IAAI,CAACQ,KAAL,CAAWH,OAAX,CAAR;AACD,KAFD,CAEE,OAAOH,CAAP,EAAU;AACV;AACD;;AACD,QAAIK,KAAK,KAAK,IAAd,EAAoB;AAClB;AACD;;AACDE,IAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBb,OAAnB,CAA2B,UAACR,GAAD,EAAS;AAClC,UAAIF,KAAK,CAACa,MAAN,KAAiB,CAAjB,IAAsBb,KAAK,CAACc,QAAN,CAAeZ,GAAf,CAA1B,EAA+C;AAC7C,YAAI;AACFkB,UAAAA,GAAG,CAAC;AAAElB,YAAAA,GAAG,EAAHA;AAAF,WAAD,EAAUqB,KAAK,CAACrB,GAAD,CAAf,CAAH;AACD,SAFD,CAEE,OAAOgB,CAAP,EAAU,CAAE;AACf;AACF,KAND;AAOD;;AAED,SAAO;AAAEb,IAAAA,aAAa,EAAbA,aAAF;AAAiBc,IAAAA,WAAW,EAAXA;AAAjB,GAAP;AACD;AAED,eAAepB,aAAf","sourcesContent":["import { useTransactionObservation_UNSTABLE } from 'recoil'\n\n/**\n * Recoil module to persist state to passed storage (it use localStorage by default)\n *\n * @param {String[]} paths The keys of state object\n *    that will be store in storage\n * @param {Object} config The config object\n * @param {String} [config.key='recoil-persist'] The default key\n *    to use in local storage\n * @param {Storage} [config.storage] Can be set as `sessionStorage` or\n *    `localStorage`. Defaults value is `localStorage`.\n */\nexport function recoilPersist(paths = [], config = {}) {\n  const key = config.key || 'recoil-persist'\n  const storage = config.storage || localStorage\n\n  function RecoilPersist() {\n    useTransactionObservation_UNSTABLE(persistState)\n    return null\n  }\n\n  function persistState(event) {\n    const toStore = {}\n    event.atomValues.forEach((value, name) => {\n      if (paths.length === 0 || paths.includes(name)) {\n        toStore[name] = value\n      }\n    })\n    try {\n      storage.setItem(key, JSON.stringify(toStore))\n    } catch (e) {}\n  }\n\n  function updateState({ set }) {\n    const toParse = storage.getItem(key)\n    let state\n    try {\n      state = JSON.parse(toParse)\n    } catch (e) {\n      return\n    }\n    if (state === null) {\n      return\n    }\n    Object.keys(state).forEach((key) => {\n      if (paths.length === 0 || paths.includes(key)) {\n        try {\n          set({ key }, state[key])\n        } catch (e) {}\n      }\n    })\n  }\n\n  return { RecoilPersist, updateState }\n}\n\nexport default recoilPersist\n"]},"metadata":{},"sourceType":"module"}