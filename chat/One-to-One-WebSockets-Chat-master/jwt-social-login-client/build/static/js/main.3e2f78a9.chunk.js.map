{"version":3,"sources":["util/ApiUtil.js","signin/Signin.js","signup/Signup.js","atom/globalState.js","profile/Profile.js","chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["AUTH_SERVICE","request","options","headers","Headers","setContentType","append","localStorage","getItem","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","Signin","props","useState","loading","setLoading","facebookLoading","setFacebookLoading","test","useEffect","history","push","initFacebookLogin","window","fbAsyncInit","FB","init","appId","autoLogAppEvents","xfbml","version","className","DingtalkOutlined","style","fontSize","name","initialValues","remember","onFinish","values","loginRequest","method","body","JSON","stringify","setItem","accessToken","catch","error","status","notification","message","description","Item","rules","required","size","prefix","UserOutlined","placeholder","LockOutlined","type","shape","htmlType","icon","FacebookFilled","onClick","login","facebookLoginRequest","facebookLogin","authResponse","console","log","scope","href","Signup","signupRequest","success","loggedInUser","atom","key","default","persistence_UNSTABLE","chatActiveContact","chatMessages","Meta","Card","Profile","useRecoilState","currentUser","setLoggedInUser","loadCurrentUser","width","border","actions","LogoutOutlined","removeItem","avatar","src","profilePicture","title","username","stompClient","Chat","useRecoilValue","text","setText","contacts","setContacts","activeContact","setActiveContact","messages","setMessages","connect","loadContacts","senderId","recipientId","undefined","id","CHAT_SERVICE","msgs","Stomp","require","SockJS","over","onConnected","onError","subscribe","onMessageReceived","err","msg","parse","sessionStorage","newMessages","info","senderName","sendMessage","trim","recipientName","content","timestamp","Date","send","users","map","contact","count","promises","all","length","class","alt","aria-hidden","value","onChange","event","target","onKeyPress","App","React","createContext","exact","path","render","Boolean","location","hostname","match","recoilPersist","storage","RecoilPersist","updateState","ReactDOM","initializeState","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e2f78a9.chunk.js","sourcesContent":["const AUTH_SERVICE = \"http://localhost:8081\";\nconst CHAT_SERVICE = \"http://localhost:8080\";\n\nconst request = (options) => {\n  const headers = new Headers();\n\n  if (options.setContentType !== false) {\n    headers.append(\"Content-Type\", \"application/json\");\n  }\n\n  if (localStorage.getItem(\"accessToken\")) {\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" + localStorage.getItem(\"accessToken\")\n    );\n  }\n\n  const defaults = { headers: headers };\n  options = Object.assign({}, defaults, options);\n\n  return fetch(options.url, options).then((response) =>\n    response.json().then((json) => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n      return json;\n    })\n  );\n};\n\nexport function login(loginRequest) {\n  return request({\n    url: AUTH_SERVICE + \"/signin\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest),\n  });\n}\n\nexport function facebookLogin(facebookLoginRequest) {\n  return request({\n    url: AUTH_SERVICE + \"/facebook/signin\",\n    method: \"POST\",\n    body: JSON.stringify(facebookLoginRequest),\n  });\n}\n\nexport function signup(signupRequest) {\n  return request({\n    url: AUTH_SERVICE + \"/users\",\n    method: \"POST\",\n    body: JSON.stringify(signupRequest),\n  });\n}\n\nexport function getCurrentUser() {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: AUTH_SERVICE + \"/users/me\",\n    method: \"GET\",\n  });\n}\n\nexport function getUsers() {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: AUTH_SERVICE + \"/users/summaries\",\n    method: \"GET\",\n  });\n}\n\nexport function countNewMessages(senderId, recipientId) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: CHAT_SERVICE + \"/messages/\" + senderId + \"/\" + recipientId + \"/count\",\n    method: \"GET\",\n  });\n}\n\nexport function findChatMessages(senderId, recipientId) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: CHAT_SERVICE + \"/messages/\" + senderId + \"/\" + recipientId,\n    method: \"GET\",\n  });\n}\n\nexport function findChatMessage(id) {\n  if (!localStorage.getItem(\"accessToken\")) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: CHAT_SERVICE + \"/messages/\" + id,\n    method: \"GET\",\n  });\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Button, Divider, notification } from \"antd\";\nimport {\n  UserOutlined,\n  LockOutlined,\n  DingtalkOutlined,\n  FacebookFilled,\n} from \"@ant-design/icons\";\nimport { login, facebookLogin } from \"../util/ApiUtil\";\nimport \"./Signin.css\";\n\n/*global FB*/\n\nconst Signin = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [facebookLoading, setFacebookLoading] = useState(false);\n  const [test, setTest] = useState(localStorage.getItem(\"accessToken\"));\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") !== null) {\n      props.history.push(\"/\");\n    }\n    initFacebookLogin();\n  }, []);\n\n  useEffect(() => {\n    initFacebookLogin();\n  }, [test]);\n\n  const initFacebookLogin = () => {\n    window.fbAsyncInit = function () {\n      FB.init({\n        appId: \"118319422120166\",\n        autoLogAppEvents: true,\n        xfbml: true,\n        version: \"v7.0\",\n      });\n    };\n  };\n\n  const getFacebookAccessToken = () => {\n    setFacebookLoading(true);\n    FB.login(\n      function (response) {\n        if (response.status === \"connected\") {\n          const facebookLoginRequest = {\n            accessToken: response.authResponse.accessToken,\n          };\n          facebookLogin(facebookLoginRequest)\n            .then((response) => {\n              localStorage.setItem(\"accessToken\", response.accessToken);\n              props.history.push(\"/\");\n              setFacebookLoading(false);\n            })\n            .catch((error) => {\n              if (error.status === 401) {\n                notification.error({\n                  message: \"Error\",\n                  description: \"Invalid credentials\",\n                });\n              } else {\n                notification.error({\n                  message: \"Error\",\n                  description:\n                    error.message ||\n                    \"Sorry! Something went wrong. Please try again!\",\n                });\n              }\n              setFacebookLoading(false);\n            });\n        } else {\n          console.log(response);\n        }\n      },\n      { scope: \"email\" }\n    );\n  };\n\n  const onFinish = (values) => {\n    setLoading(true);\n    login(values)\n      .then((response) => {\n        localStorage.setItem(\"accessToken\", response.accessToken);\n        props.history.push(\"/chat\");\n        setLoading(false);\n      })\n      .catch((error) => {\n        if (error.status === 401) {\n          notification.error({\n            message: \"Error\",\n            description: \"Username or Password is incorrect. Please try again!\",\n          });\n        } else {\n          notification.error({\n            message: \"Error\",\n            description:\n              error.message || \"Sorry! Something went wrong. Please try again!\",\n          });\n        }\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <DingtalkOutlined style={{ fontSize: 50 }} />\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input\n            size=\"large\"\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\n            placeholder=\"Username\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\n        >\n          <Input\n            size=\"large\"\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            shape=\"round\"\n            size=\"large\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n            loading={loading}\n          >\n            Log in\n          </Button>\n        </Form.Item>\n        <Divider>OR</Divider>\n        <Form.Item>\n          <Button\n            icon={<FacebookFilled style={{ fontSize: 20 }} />}\n            loading={facebookLoading}\n            className=\"login-with-facebook\"\n            shape=\"round\"\n            size=\"large\"\n            onClick={getFacebookAccessToken}\n          >\n            Log in With Facebook\n          </Button>\n        </Form.Item>\n        Not a member yet? <a href=\"/signup\">Sign up</a>\n      </Form>\n    </div>\n  );\n};\n\nexport default Signin;\n","import React, { useEffect, useState } from \"react\";\nimport { Form, Input, Button, notification } from \"antd\";\nimport { DingtalkOutlined } from \"@ant-design/icons\";\nimport { signup } from \"../util/ApiUtil\";\nimport \"./Signup.css\";\n\nconst Signup = (props) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") !== null) {\n      props.history.push(\"/\");\n    }\n  }, []);\n\n  const onFinish = (values) => {\n    setLoading(true);\n    signup(values)\n      .then((response) => {\n        notification.success({\n          message: \"Success\",\n          description:\n            \"Thank you! You're successfully registered. Please Login to continue!\",\n        });\n        props.history.push(\"/login\");\n        setLoading(false);\n      })\n      .catch((error) => {\n        notification.error({\n          message: \"Error\",\n          description:\n            error.message || \"Sorry! Something went wrong. Please try again!\",\n        });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <DingtalkOutlined style={{ fontSize: 50 }} />\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"name\"\n          rules={[{ required: true, message: \"Please input your name!\" }]}\n        >\n          <Input size=\"large\" placeholder=\"Name\" />\n        </Form.Item>\n        <Form.Item\n          name=\"username\"\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\n        >\n          <Input size=\"large\" placeholder=\"Username\" />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your email!\" }]}\n        >\n          <Input size=\"large\" placeholder=\"Email\" />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\n        >\n          <Input size=\"large\" type=\"password\" placeholder=\"Password\" />\n        </Form.Item>\n        <Form.Item\n          name=\"profilePicUrl\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your profile picture URL!\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Profile picture url\" />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            shape=\"round\"\n            size=\"large\"\n            htmlType=\"submit\"\n            className=\"login-form-button\"\n            loading={loading}\n          >\n            Signup\n          </Button>\n        </Form.Item>\n        Already a member? <a href=\"/login\">Log in</a>\n      </Form>\n    </div>\n  );\n};\n\nexport default Signup;\n","import { atom } from \"recoil\";\n\nexport const loggedInUser = atom({\n  key: \"loggedInUser\",\n  default: {},\n  persistence_UNSTABLE: {\n    type: \"loggedInUser\",\n  },\n});\n\nexport const chatActiveContact = atom({\n  key: \"chatActiveContact\",\n  persistence_UNSTABLE: {\n    type: \"chatActiveContact\",\n  },\n});\n\nexport const chatMessages = atom({\n  key: \"chatMessages\",\n  default: [],\n  persistence_UNSTABLE: {\n    type: \"chatMessages\",\n  },\n});\n","import React, { useEffect } from \"react\";\nimport { Card, Avatar } from \"antd\";\nimport { useRecoilState } from \"recoil\";\nimport { loggedInUser } from \"../atom/globalState\";\nimport { LogoutOutlined } from \"@ant-design/icons\";\nimport { getCurrentUser } from \"../util/ApiUtil\";\nimport \"./Profile.css\";\n\nconst { Meta } = Card;\n\nconst Profile = (props) => {\n  const [currentUser, setLoggedInUser] = useRecoilState(loggedInUser);\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") === null) {\n      props.history.push(\"/login\");\n    }\n    loadCurrentUser();\n  }, []);\n\n  const loadCurrentUser = () => {\n    getCurrentUser()\n      .then((response) => {\n        setLoggedInUser(response);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    props.history.push(\"/login\");\n  };\n\n  return (\n    <div className=\"profile-container\">\n      <Card\n        style={{ width: 420, border: \"1px solid #e1e0e0\" }}\n        actions={[<LogoutOutlined onClick={logout} />]}\n      >\n        <Meta\n          avatar={\n            <Avatar\n              src={currentUser.profilePicture}\n              className=\"user-avatar-circle\"\n            />\n          }\n          title={currentUser.name}\n          description={\"@\" + currentUser.username}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { Button, message } from \"antd\";\nimport {\n  getUsers,\n  countNewMessages,\n  findChatMessages,\n  findChatMessage,\n} from \"../util/ApiUtil\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport {\n  loggedInUser,\n  chatActiveContact,\n  chatMessages,\n} from \"../atom/globalState\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport \"./Chat.css\";\n\nvar stompClient = null;\nconst Chat = (props) => {\n  const currentUser = useRecoilValue(loggedInUser);\n  const [text, setText] = useState(\"\");\n  const [contacts, setContacts] = useState([]);\n  const [activeContact, setActiveContact] = useRecoilState(chatActiveContact);\n  const [messages, setMessages] = useRecoilState(chatMessages);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\") === null) {\n      props.history.push(\"/login\");\n    }\n    connect();\n    loadContacts();\n  }, []);\n\n  useEffect(() => {\n    if (activeContact === undefined) return;\n    findChatMessages(activeContact.id, currentUser.id).then((msgs) =>\n      setMessages(msgs)\n    );\n    loadContacts();\n  }, [activeContact]);\n\n  const connect = () => {\n    const Stomp = require(\"stompjs\");\n    var SockJS = require(\"sockjs-client\");\n    SockJS = new SockJS(\"http://localhost:8080/ws\");\n    stompClient = Stomp.over(SockJS);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    console.log(\"connected\");\n    console.log(currentUser);\n    stompClient.subscribe(\n      \"/user/\" + currentUser.id + \"/queue/messages\",\n      onMessageReceived\n    );\n  };\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  const onMessageReceived = (msg) => {\n    const notification = JSON.parse(msg.body);\n    const active = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n      .chatActiveContact;\n\n    if (active.id === notification.senderId) {\n      findChatMessage(notification.id).then((message) => {\n        const newMessages = JSON.parse(sessionStorage.getItem(\"recoil-persist\"))\n          .chatMessages;\n        newMessages.push(message);\n        setMessages(newMessages);\n      });\n    } else {\n      message.info(\"Received a new message from \" + notification.senderName);\n    }\n    loadContacts();\n  };\n\n  const sendMessage = (msg) => {\n    if (msg.trim() !== \"\") {\n      const message = {\n        senderId: currentUser.id,\n        recipientId: activeContact.id,\n        senderName: currentUser.name,\n        recipientName: activeContact.name,\n        content: msg,\n        timestamp: new Date(),\n      };\n      stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n\n      const newMessages = [...messages];\n      newMessages.push(message);\n      setMessages(newMessages);\n    }\n  };\n\n  const loadContacts = () => {\n    const promise = getUsers().then((users) =>\n      users.map((contact) =>\n        countNewMessages(contact.id, currentUser.id).then((count) => {\n          contact.newMessages = count;\n          return contact;\n        })\n      )\n    );\n\n    promise.then((promises) =>\n      Promise.all(promises).then((users) => {\n        setContacts(users);\n        if (activeContact === undefined && users.length > 0) {\n          setActiveContact(users[0]);\n        }\n      })\n    );\n  };\n\n  return (\n    <div id=\"frame\">\n      <div id=\"sidepanel\">\n        <div id=\"profile\">\n          <div class=\"wrap\">\n            <img\n              id=\"profile-img\"\n              src={currentUser.profilePicture}\n              class=\"online\"\n              alt=\"\"\n            />\n            <p>{currentUser.name}</p>\n            <div id=\"status-options\">\n              <ul>\n                <li id=\"status-online\" class=\"active\">\n                  <span class=\"status-circle\"></span> <p>Online</p>\n                </li>\n                <li id=\"status-away\">\n                  <span class=\"status-circle\"></span> <p>Away</p>\n                </li>\n                <li id=\"status-busy\">\n                  <span class=\"status-circle\"></span> <p>Busy</p>\n                </li>\n                <li id=\"status-offline\">\n                  <span class=\"status-circle\"></span> <p>Offline</p>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div id=\"search\" />\n        <div id=\"contacts\">\n          <ul>\n            {contacts.map((contact) => (\n              <li\n                onClick={() => setActiveContact(contact)}\n                class={\n                  activeContact && contact.id === activeContact.id\n                    ? \"contact active\"\n                    : \"contact\"\n                }\n              >\n                <div class=\"wrap\">\n                  <span class=\"contact-status online\"></span>\n                  <img id={contact.id} src={contact.profilePicture} alt=\"\" />\n                  <div class=\"meta\">\n                    <p class=\"name\">{contact.name}</p>\n                    {contact.newMessages !== undefined &&\n                      contact.newMessages > 0 && (\n                        <p class=\"preview\">\n                          {contact.newMessages} new messages\n                        </p>\n                      )}\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div id=\"bottom-bar\">\n          <button id=\"addcontact\">\n            <i class=\"fa fa-user fa-fw\" aria-hidden=\"true\"></i>{\" \"}\n            <span>Profile</span>\n          </button>\n          <button id=\"settings\">\n            <i class=\"fa fa-cog fa-fw\" aria-hidden=\"true\"></i>{\" \"}\n            <span>Settings</span>\n          </button>\n        </div>\n      </div>\n      <div class=\"content\">\n        <div class=\"contact-profile\">\n          <img src={activeContact && activeContact.profilePicture} alt=\"\" />\n          <p>{activeContact && activeContact.name}</p>\n        </div>\n        <ScrollToBottom className=\"messages\">\n          <ul>\n            {messages.map((msg) => (\n              <li class={msg.senderId === currentUser.id ? \"sent\" : \"replies\"}>\n                {msg.senderId !== currentUser.id && (\n                  <img src={activeContact.profilePicture} alt=\"\" />\n                )}\n                <p>{msg.content}</p>\n              </li>\n            ))}\n          </ul>\n        </ScrollToBottom>\n        <div class=\"message-input\">\n          <div class=\"wrap\">\n            <input\n              name=\"user_input\"\n              size=\"large\"\n              placeholder=\"Write your message...\"\n              value={text}\n              onChange={(event) => setText(event.target.value)}\n              onKeyPress={(event) => {\n                if (event.key === \"Enter\") {\n                  sendMessage(text);\n                  setText(\"\");\n                }\n              }}\n            />\n\n            <Button\n              icon={<i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>}\n              onClick={() => {\n                sendMessage(text);\n                setText(\"\");\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Signin from \"./signin/Signin\";\nimport Signup from \"./signup/Signup\";\nimport Profile from \"./profile/Profile\";\nimport Chat from \"./chat/Chat\";\nimport \"./App.css\";\n\nexport const AppContext = React.createContext();\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" render={(props) => <Profile {...props} />} />\n          <Route\n            exact\n            path=\"/login\"\n            render={(props) => <Signin {...props} />}\n          />\n          <Route\n            exact\n            path=\"/signup\"\n            render={(props) => <Signup {...props} />}\n          />\n          <Route exact path=\"/chat\" render={(props) => <Chat {...props} />} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport recoilPersist from \"recoil-persist\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst { RecoilPersist, updateState } = recoilPersist([], {\n  key: \"recoil-persist\",\n  storage: sessionStorage,\n});\n\nReactDOM.render(\n  <RecoilRoot initializeState={updateState}>\n    <RecoilPersist />\n    <App />\n  </RecoilRoot>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}